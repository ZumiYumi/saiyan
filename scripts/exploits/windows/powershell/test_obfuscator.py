import sys
import random
import string
import argparse
import base64
import zlib

#function to obfuscate commands
def obfuscate():
    pwshCommands = input("Please enter your command to encrypt: ").strip()
    
    #split the original command into individual characters and convert them to [char]
    char_parts = [f"[char]{ord(command)}" for command in pwshCommands]
    
    var_assignments = []
    combined_parts = []
# hi <3 // hi back!!!
    start = 0
    while start < len(char_parts): #loop that counts down from length of character parts which is the ordinate of each command in pwshCommands
        length = random.randint(2, 5) #random chunk between 2 and 5
        chunk = char_parts[start:start + length]
        var_name = f"$p{len(var_assignments)}"
        var_assignments.append(f"{var_name} = {' + '.join(chunk)}")
        combined_parts.append(var_name)
        start += length

    final_combined = ' + '.join(combined_parts)

    noise_variables = [
        f"$d{idx} = \"{''.join(random.choices(string.ascii_letters, k=5))}\""
        for idx in range(3) #make random junk
    ]
    obfuscated_command = (
        f"powershell -Command '{'; '.join(var_assignments + noise_variables)}; "
        f"Invoke-Expression ({final_combined})'"
    )

    # Encode the entire command in UTF-16LE and convert it to Base64
    command_bytes = obfuscated_command.encode('utf-16le')
    base64_command = base64.b64encode(command_bytes).decode('utf-8')

    # Return the PowerShell command using the -EncodedCommand parameter
    return f"powershell -EncodedCommand {base64_command}"

#main
def main():
    print(obfuscate())

if __name__ == "__main__":
    main()
